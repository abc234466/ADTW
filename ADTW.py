'''
First comment
'''

# import method
import numpy as np  # including matrix
import math  # including inf
import time  # calculate the execution time
import os  # list data of directory

from heapq import *  # include heap queue data structure

'''
TS = [4, 0.57094, 0.57094, 0.57094, 0.57094, 0.57094, 0.57094, 0.57094, 0.57094, 0.57094, 0.57094, 0.57094, 0.57094,
      0.57094, 0.57094, 0.57094, 0.57094, 0.57094, 0.57094, 0.57094, 0.57094, 0.57094, 0.57094, 0.57094, 0.57094,
      0.57094, 0.57094, 0.57094, 0.57094, 0.57094, 0.57094, 0.57094, 0.57094, 0.57094, 0.57094, 0.57094, 0.57094,
      0.57094, 0.57094, 0.57094, 0.57094, 0.57094, 0.57094, 0.57094, 0.57094, 0.57094, 0.57094, 0.57122, 0.57528,
      0.59379, 0.6123, 0.62808, 0.63162, 0.63278, 0.63458, 0.64561, 0.66153, 0.67902, 0.69045, 0.69462, 0.69501,
      0.69816, 0.71077, 0.72928, 0.74779, 0.7663, 0.78482, 0.80333, 0.82184, 0.84035, 0.85887, 0.87738, 0.89589, 0.9144,
      0.93291, 0.95143, 0.96994, 0.98845, 1.007, 1.0255, 1.044, 1.0625, 1.081, 1.0995, 1.118, 1.1243, 1.1275, 1.1275,
      1.1357, 1.1488, 1.1673, 1.1814, 1.1893, 1.1893, 1.1893, 1.1893, 1.1893, 1.1893, 1.1952, 1.2106, 1.2287, 1.2431,
      1.2501, 1.2512, 1.2512, 1.2512, 1.2512, 1.2523, 1.2559, 1.2716, 1.2902, 1.3087, 1.2983, 1.2803, 1.2618, 1.2543,
      1.2512, 1.2512, 1.2356, 1.211, 1.174, 1.1416, 1.1137, 1.0952, 1.075, 1.0507, 1.0137, 0.97663, 0.94287, 0.92278,
      0.90377, 0.88751, 0.88199, 0.88013, 0.88292, 0.90104, 0.93134, 0.96836, 1.0054, 1.0424, 1.0794, 1.1165, 1.1535,
      1.1905, 1.2275, 1.2553, 1.2764, 1.2949, 1.3067, 1.313, 1.313, 1.2914, 1.25, 1.1574, 1.0753, 1.0038, 1.0038,
      1.0038, 1.0038, 0.94828, 0.89274, 0.8372, 0.76737, 0.69541, 0.62136, 0.53708, 0.44884, 0.35628, 0.27003, 0.18928,
      0.11523, 0.17029, -0.19995, -0.10692, -0.18097, -0.24818, -0.3049, -0.36057, -0.41611, -0.47165, -0.52718,
      -0.57599, -0.61262, -0.63392, -0.65429, -0.67832, -0.71309, -0.75012, -0.78714, -0.82417, -0.86119, -0.89821,
      -0.93524, -0.97226, -1.0093, -1.0463, -1.0833, -1.1204, -1.1636, -1.2113, -1.2669, -1.3161, -1.3567, -1.3752,
      -1.3934, -1.4079, -1.4079, -1.4079, -1.4079, -1.4079, -1.4079, -1.4061, -1.3951, -1.3791, -1.3606, -1.3421,
      -1.3236, -1.3055, -1.2901, -1.2842, -1.2842, -1.2842, -1.2948, -1.3126, -1.3311, -1.3496, -1.3681, -1.3866,
      -1.4051, -1.4236, -1.4422, -1.4607, -1.4792, -1.4977, -1.5142, -1.5284, -1.5099, -1.4914, -1.4729, -1.4544,
      -1.4359, -1.4173, -1.4111, -1.4079, -1.4079, -1.3996, -1.3866, -1.3681, -1.354, -1.3461, -1.3461, -1.3453,
      -1.3374, -1.3189, -1.3004, -1.2818, -1.2633, -1.2448, -1.2305, -1.2234, -1.2224, -1.2172, -1.2022, -1.1688,
      -1.1341, -1.1042, -1.0987, -1.0987, -1.0987, -1.0987, -1.0987, -1.0987, -1.0987, -1.0987, -1.0987, -1.0909,
      -1.0786, -1.0601, -1.0463, -1.0369, -1.0369, -1.0334, -1.0219, -0.98487, -0.94784, -0.91082, -0.87379, -0.83677,
      -0.80199, -0.77797, -0.7576, -0.73769, -0.71012, -0.67646, -0.64013, -0.60822, -0.58469, -0.56618, -0.54766,
      -0.52915, -0.51064, -0.49213, -0.47362, -0.4551, -0.43659, -0.41808, -0.39957, -0.38106, -0.36686, -0.35663,
      -0.35663, -0.35455, -0.35033, -0.33182, -0.31331, -0.2948, -0.23609, -0.23609, -0.23609, -0.23609, -0.27635,
      -0.32262, -0.37476, -0.39811, -0.41027, -0.41027, -0.41027, -0.41027, -0.41027, -0.41027, -0.41027, -0.41027,
      -0.41027, -0.41027, -0.41027, -0.41027, -0.41027, -0.41027, -0.41027, -0.41027, -0.41027, -0.41027, -0.41027,
      -0.41027, -0.41027, -0.41027, -0.41027, -0.41027, -0.41027, -0.41027, -0.41027, -0.41027, -0.41027, -0.43672,
      -0.47572, -0.52786, -0.56253, -0.58444, -0.58444, -0.57552, -0.55449, -0.50235, -0.45178, -0.42247, -0.47461,
      -0.52675, -0.57119, -0.58118, -0.58444, -0.58444, -0.58444, -0.58444, -0.58444, -0.58444, -0.58444, -0.58333,
      -0.57446, -0.53896, -0.48682, -0.43467, -0.41229, -0.41027, -0.41027, -0.38786, -0.34814, -0.296, -0.24386,
      -0.19171, -0.13957, -0.09639, -0.34517, -0.34517, -0.34517, -0.34517, -0.34517, -0.34517, -0.34517, -0.11443,
      0.13187, 0.39258, 0.48091, 0.11226, 0.11226, 0.1355, 0.17217, 0.22431, 0.26404, 0.28644, 0.28644, 0.28847,
      0.31085, 0.36299, 0.41513, 0.46727, 0.51942, 0.57156, 0.60019, 0.58799, 0.5416, 0.50405, 0.49407, 0.53606,
      0.58493, 0.62709, 0.63479, 0.63479, 0.63479, 0.63479, 0.63479, 0.63479, 0.63479, 0.63479, 0.63479, 0.63479,
      0.63479, 0.63479, 0.63479, 0.63479, 0.63479, 0.62999, 0.61371, 0.56157, 0.50943, 0.47564, 0.5189, 0.56823,
      0.62037, 0.67251, 0.72466, 0.7768, 0.82894, 0.88108, 0.93517, 1.0017, 1.0919, 1.1958, 1.2967, 1.3681, 1.4203,
      1.4724, 1.5245, 1.5767, 1.6288, 1.681, 1.7331, 1.7852, 1.8374, 1.8895, 1.9417, 1.9879, 2.0282, 2.0282, 2.0282,
      2.0282, 2.0803, 2.1325, 2.1846, 2.1965, 2.2024, 2.2024, 2.2024, 2.2024, 2.2024, 2.1846, 2.1514, 2.0992, 2.0399,
      1.9616, 1.8574, 1.7531, 1.668, 1.6126, 1.56, 1.522, 1.5076, 1.5057, 1.5057, 1.5057, 1.5057, 1.5057, 1.5057,
      1.5057, 1.5043, 1.4998, 1.4569, 1.4047, 1.3526, 1.3004, 1.2483, 1.1962, 1.1176, 1.0264, 0.92213, 0.80037, 0.66586,
      0.50943, 0.36192, 0.22653, 0.12225, 0.33731, -0.40619, -0.12626, -0.1784, -0.22284, -0.23282, -0.23609, -0.23101,
      -0.19995, -0.1551, -0.10584, -0.40395, -0.34517, -0.35072, -0.39509, -0.1074, -0.15954, -0.21168, -0.26382,
      -0.31597, -0.36811, -0.42025, -0.47239, -0.52453, -0.59214, -0.6732, -0.77748, -0.8728, -0.95942, -1.0116,
      -1.0608, -1.107, -1.107, -1.107, -1.107, -1.107, -1.107, -1.107, -1.1414, -1.1846, -1.2368, -1.2657, -1.2811,
      -1.2811, -1.2687, -1.239, -1.1869, -1.1367, -1.107, -1.107, -1.107, -1.107, -1.107, -1.107, -1.107, -1.107,
      -1.107, -1.1143, -1.1353, -1.1824, -1.2346, -1.2867, -1.3388, -1.391, -1.4431, -1.4545, -1.4553, -1.4553, -1.4553,
      -1.4553, -1.4553, -1.4553, -1.4553, -1.4553, -1.4422, -1.4165, -1.3644, -1.317, -1.2811, -1.2811, -1.2811,
      -1.2628, -1.1674, -1.0659, -0.96798, -0.9003, -0.84293, -0.79472, -0.76809, -0.75862, -0.75862, -0.75862,
      -0.75862, -0.75862, -0.75862, -0.75862, -0.75862, -0.75862, -0.73259, -0.68762, -0.63548, -0.60221, -0.58444,
      -0.58444, -0.58444, -0.58444, -0.58444, -0.58444, -0.58444, -0.58444, -0.58444, -0.58444, -0.7514, -0.7514,
      -0.7514, -0.7514, -0.7514, -0.7514, -0.7514, -0.7514, -0.7514, -0.7514, -0.7514, -0.7514, -0.7514, -0.7514,
      -0.7514, -0.7514, -0.7514, -0.7514, -0.7514, -0.7514, -0.7514, -0.7514, -0.7514, -0.7514, -0.7514, -0.7514,
      -0.7514, -0.7514, -0.7514, -0.7514, -0.7514, -0.7514, -0.7514, -0.7514, -0.7514, -0.7514, -0.7514, -0.7514,
      -0.7514, -0.7514, -0.7514, -0.7514, -0.7514, -0.77007, -0.8141, -0.92324, -1.0291, -1.0904, -0.98129, -0.87215,
      -0.77913, -0.75824, -0.7514, -0.74078, -0.67576, -0.58189, -0.47878, -0.41144, -0.38684, -0.38451, -0.36594,
      -0.29163, -0.18249, -0.40239, -0.16817, -0.14696, -0.14696, -0.14696, -0.14696, -0.14696, -0.14696, -0.14696,
      -0.14696, -0.053182, 0.13169, 0.1426, 0.23968, 0.32372, 0.21458, 0.49161, -0.054075, -0.11682, -0.14696, -0.14696,
      -0.14696, -0.14696, -0.14696, -0.14696, -0.14696, -0.14696, -0.16385, 0.29424, 0.17511, 0.28, 0.3423, 0.3423,
      0.3423, 0.37713, 0.46769, 0.5745, 0.65904, 0.70083, 0.70686, 0.70686, 0.70686, 0.70686, 0.70686, 0.70686, 0.70686,
      0.70686, 0.70686, 0.62162, 0.51413, 0.40499, 0.36096, 0.3423, 0.3423, 0.29644, 0.22387, 0.11473, 0.1299, -0.14696,
      -0.14696, -0.14696, -0.14696, -0.14696, -0.14696, -0.24297, -0.14132, -0.24751, -0.35665, -0.46579, -0.57493,
      -0.69228, -0.85483, -1.0533, -1.2715, -1.4898, -1.7081, -1.9256, -2.1369, -2.2863, -2.3954, -2.5046, -2.5048,
      -2.4256, -2.3165, -2.1678, -1.9868, -1.7685, -1.5247, -1.2576, -0.9302, -0.63963, -0.38684, -0.38684, -0.38684,
      -0.38684, -0.2777, -0.16856, -0.33273, 0.21296, 0.15885, 0.26799, 0.37713, 0.48627, 0.5954, 0.74174, 0.92049,
      1.1388, 1.342, 1.5057, 1.6148, 1.7239, 1.8331, 1.9422, 2.0513, 2.1013, 2.0525, 1.9515, 1.8424, 1.7332, 1.6241,
      1.5259, 1.4493, 1.436, 1.436, 1.436, 1.436, 1.436, 1.436, 1.5861, 1.7843, 2.0026, 2.1655, 2.3021, 2.4113, 2.4838,
      2.5297, 2.5297, 2.5297, 2.5297, 2.5297, 2.528, 2.5042, 2.395, 2.2859, 2.1606, 1.9632, 1.7518, 1.5442, 1.3909,
      1.2665, 1.1573, 1.0482, 0.93907, 0.83225, 0.74169, 0.70686, 0.70686, 0.70686, 0.70686, 0.70686, 0.70686, 0.70686,
      0.70686, 0.70686, 0.70686, 0.70686, 0.70686, 0.68811, 0.65113, 0.542, 0.43889, 0.3423, 0.3423, 0.3423, 0.3423,
      0.24571, 0.1426, 0.13169, -0.053182, -0.14696, -0.14696, -0.14696, -0.14696, -0.14696, -0.14696, -0.14696,
      -0.14696, -0.16817, -0.40239, -0.18249, -0.29163, -0.36594, -0.38451, -0.38684, -0.41144, -0.47878, -0.58189,
      -0.69103, -0.80017, -0.9093, -1.0116, -1.0999, -1.116, -1.116, -1.116, -1.0307, -0.92324, -0.8141, -0.77007,
      -0.7514, -0.7514, -0.7514, -0.7514, -0.7514, -0.7239, -0.67013, -0.56099, -0.4619, -0.38684, -0.38684, -0.38684,
      -0.38684, -0.38684, -0.38684, -0.38684, -0.38684, -0.38684, -0.37862, -0.32521, -0.2359, -0.13083, -0.29499,
      -0.14696, -0.14696, -0.14696, -0.14696, -0.14696, -0.14696, -0.41936, -0.17088, -0.28002, -0.34964, -0.38684,
      -0.38684, -0.38684, -0.38684, -0.38684, -0.38684, -0.38684, -0.38684, -0.38684, -0.38684]

Compared

# short data
# TS = [9, -79,-76,-73,-69,-6,-63,-61]
# ComparedTS = [18, -87,-84,-82,-81,-79,-76,-74]


# Trim the label of the time series
Trim_TS = TS[1:]
Trim_ComparedTS = ComparedTS[1:]
'''

# global matrix_ADTW matrix
matrix_ADTW = []

# usage of cells

count = 0

# ----- Origin DTW -----

def originDTW(ts1, ts2):
    # initialization of matrix
    matrix_DTW = np.array([[math.inf for i in range(len(ts1) + 1)] for i in range(len(ts2) + 1)])

    # set the value of origin
    matrix_DTW[0][0] = 0

    # Dynamic Programming -> Divide and Conquer & Memorization
    for i in range(1, len(ts1) + 1):
        for j in range(1, len(ts2) + 1):
            distance = abs(ts1[i - 1] - ts2[j - 1])
            matrix_DTW[i][j] = distance + min(matrix_DTW[i - 1][j], matrix_DTW[i][j - 1], matrix_DTW[i - 1, j - 1])
    # print(matrix_DTW)
    return matrix_DTW[i][j]


# ----- MyDTW -----
def adaptiveWindowDTW(ts1, ts2, cur_mini_distance):
    # initialization of matrix
    global matrix_ADTW
    matrix_ADTW = [[math.inf for i in range(len(ts1))] for i in range(len(ts2))]

    # two indices of time series
    ts1_index = 0
    ts2_index = 0

    # set the value of origin point [0, 0]
    matrix_ADTW[0][0] = abs(ts1[0] - ts2[0])
    # current_minimum_distance = matrix_ADTW[0][0]

    # two lengths of time series
    ts1_length = len(ts1)  # length of m
    ts2_length = len(ts2)  # length of n

    # unexpanded cells queuing for expansion
    unexpandedCellQueue = []

    while True:
        global totalUsedCells
        count = 0
        # if #something happen:
        if matrix_ADTW[ts1_length - 1][ts2_length - 1] != math.inf and matrix_ADTW[ts1_length - 1][ts2_length - 1] < \
                unexpandedCellQueue[0][0]:
            '''
            count = 0
            
            for i in matrix_ADTW:
                for j in i:
                    if j != math.inf:
                        count += 1

            print("Total {0}, we use {1}, usage {2}%".format(ts1_length * ts2_length, count,
                                                             count * 100 / (ts1_length * ts2_length)))            
            '''
            # print(matrix_ADTW)
            return matrix_ADTW[ts1_length - 1][ts2_length - 1]
        else:

            # diagonal direction
            if ts1_index + 1 < ts1_length and ts2_index + 1 < ts2_length:
                # accumulate current distance with diagonal distance
                distance_dia = abs(ts1[ts1_index + 1] - ts2[ts2_index + 1])
                cumulativeDia = matrix_ADTW[ts1_index][ts2_index] + distance_dia

                # check whether the cell should be add into unexpandedCellQueue
                if matrix_ADTW[ts1_index + 1][ts2_index + 1] == math.inf:
                    matrix_ADTW[ts1_index + 1][ts2_index + 1] = cumulativeDia
                    insertList = [cumulativeDia, ts1_index + 1, ts2_index + 1]
                    heappush(unexpandedCellQueue, insertList)
                    #totalUsedCells += 1

            # down direction
            if ts1_index + 1 < ts1_length:
                # accumulate current distance with down distance
                distance_down = abs(ts1[ts1_index + 1] - ts2[ts2_index])
                cumulativeDown = matrix_ADTW[ts1_index][ts2_index] + distance_down

                # check whether the cell should be add into unexpandedCellQueue
                if matrix_ADTW[ts1_index + 1][ts2_index] == math.inf:
                    matrix_ADTW[ts1_index + 1][ts2_index] = cumulativeDown
                    insertList = [cumulativeDown, ts1_index + 1, ts2_index]
                    heappush(unexpandedCellQueue, insertList)
                    #totalUsedCells += 1

            # right direction
            if ts2_index + 1 < ts2_length:
                # accumulate current distance with right distance
                distance_right = abs(ts1[ts1_index] - ts2[ts2_index + 1])
                cumulativeRight = matrix_ADTW[ts1_index][ts2_index] + distance_right

                # check whether the cell should be add into unexpandedCellQueue
                if matrix_ADTW[ts1_index][ts2_index + 1] == math.inf:
                    matrix_ADTW[ts1_index][ts2_index + 1] = cumulativeRight
                    insertList = [cumulativeRight, ts1_index, ts2_index + 1]
                    heappush(unexpandedCellQueue, insertList)
                    #totalUsedCells += 1

            # worst case -> fill all cells
            if len(unexpandedCellQueue) == 1:
                return unexpandedCellQueue[0][0]

            # find the current minimum cell
            minimum_cell = heappop(unexpandedCellQueue)

            # check whether surpass current allowed distance
            if cur_mini_distance < minimum_cell[0]:
                break

            # if matrix_ADTW[minimum_cell[1]][minimum_cell[2]] != math.inf and matrix_ADTW[minimum_cell[1]][minimum_cell[2]] > minimum_cell[0]:
            #     count +=1

            # replace the ts1_index & ts2_index with the value of current minimum_cell
            ts1_index = minimum_cell[1]
            ts2_index = minimum_cell[2]


'''


main program



'''

pre_dir = 'UCR_TS_Archive_2015'

# experiment all data
for file in os.listdir(pre_dir):
    print('Dataset {} begins.'.format(file))
    # read TEST & TRAIN data set
    test_data_dir = pre_dir + '/' + file + '/' + file + '_TEST'
    train_data_dir = pre_dir + '/' + file + '/' + file + '_TRAIN'

    # open test & train data
    with open(test_data_dir) as test_data, open(train_data_dir) as train_data:

        # two variables -> total time for DTW & ADTW
        all_dtw_total_time = 0
        all_adtw_total_time = 0
        # set up the matched & unmatched points
        matched_point = 0
        unmatched_point = 0

        #totalUsedCells = 0

        # process the train data
        processed_train_data = []
        while True:
            # read whole line data -> transform into data we want
            train_data_one_line = train_data.readline().split(',')
            # print(train_data_one_line)
            if train_data_one_line == ['']:
                break
            else:
                processed_train_data.append(train_data_one_line)
        # print(len(processed_train_data))

        # store the total experiment
        totalExperiment = 0

        ### test data while loop
        while True:

            '''
            initialization -> read one line test data -> adjust the data < string to list >
            e.g. 
                '1, 2, 3, 4, 5' split(',') -> ['1', '2', '3', '4', '5'] -> [1, 2, 3, 4, 5]
            '''

            test_data_one_line = test_data.readline().split(',')
            # print(test_data_one_line)
            # print(test_data_one_line)
            # store the total experimental rounds


            # end of data
            if test_data_one_line == ['']:
                # print('Matched number is {0}, and unmatched number is {1}.'.format(matched_point, unmatched_point))
                # print('Total time of DTW and ADTW is {0:.3f} {1:.3f}'.format(all_dtw_total_time, all_adtw_total_time))
                print('Total time of ADTW of {0} is {1:.3f}'.format(file, all_adtw_total_time))
                # print('Accuracy is {0:.3f}%.'.format(matched_point * 100 / (matched_point + unmatched_point)))
                # totalUsedCells += totalExperiment
                # totalCells = len(train_data_list) * len(train_data_list) * totalExperiment
                # print("Total {0}, we use {1}, usage {2}%".format(totalCells, totalUsedCells,
                #                                                  totalUsedCells * 100 / (
                #                                                      totalCells)))
                print('---End of Test---')
                break
            else:

                '''
                    adjust the data :
                    ['1', '2', '3', '4', '5'] -> [1, 2, 3, 4, 5]
                '''
                test_data_list = []
                for value in test_data_one_line[1:]:
                    test_data_list.append(float(value))

                # get the 'test' data label
                test_label = test_data_one_line[0]

                # store the current minimum distance -> in order to know who is the closet class
                current_minimum_distance = math.inf

                # scores between DTW and ADTW
                adtwpoint = 0
                dtwpoint = 0

                # set up a current minimum distance to infinity
                current_comparision_distance = math.inf

                train_data_index = 0

            ### train data while loop
            while True:

                '''
                initialization -> read one line test data -> adjust the data < string to list >
                e.g. 
                    '1, 2, 3, 4, 5' split(',') -> ['1', '2', '3', '4', '5']
                '''


                # end of current test data -> begin next test data
                if train_data_index == len(processed_train_data):

                    # print the information of compared time series
                    # print("The most similar class is {0}".format(train_label))
                    #
                    # # Accuracy of Test Set
                    # if test_label == train_label:
                    #     matched_point += 1
                    # else:
                    #     unmatched_point += 1
                    #
                    # # comparison of DTW & ADTW
                    # print("DTW wins {0}, ADTW wins {1}".format(dtwpoint, adtwpoint))
                    break
                else:
                    totalExperiment += 1
                    # print('Train DataSet {0}''s {1} '.format(file, i))
                    # split_train_data_one_line = train_data_one_line
                    # store the test
                    train_data_this_line = processed_train_data[train_data_index]
                    '''
                        ['1', '2', '3', '4', '5'] -> [1, 2, 3, 4, 5]
                    '''
                    train_data_list = []
                    for value in train_data_this_line[1:]:
                        train_data_list.append(float(value))
                    # print(processed_train_data)
                    # print("---Origin DTW---")

                    # calculate the execution time
                    # dtw_start_time = time.time()
                    # dtw_distance = originDTW(test_data_list, train_data_list)
                    # dtw_total_time = time.time() - dtw_start_time
                    #
                    # all_dtw_total_time += dtw_total_time

                    # print('Total Distance of DTW is {0:.3f}'.format(dtw_distance))
                    # print('Total time is {0:.5f}'.format(dtw_total_time))

                    # print("---ADTW---")
                    # calculate the execution time

                    # beginning of ADTW
                    adtw_start_time = time.time()

                    '''
                    function adaptiveWindowDTW(A, B, C) ->
                    A : current test data <list>
                    B : current train data <list>
                    C : current allowed maximum distance
                    '''
                    adtw_distance = adaptiveWindowDTW(test_data_list, train_data_list, current_comparision_distance)
                    adtw_total_time = time.time() - adtw_start_time
                    # end of ADTW

                    all_adtw_total_time += adtw_total_time

                    # adtw_distance != None -> We arrive at the cell matrix_ADTW[m][n]
                    if adtw_distance != None:

                        # update the current allowed maximum distance
                        if adtw_distance < current_comparision_distance:
                            current_comparision_distance = adtw_distance

                        # 1 nearest neighbor (1NN) -> determine the most similar class
                        if adtw_distance < current_minimum_distance:
                            # if we find another smaller value -> update adtw_distance
                            current_minimum_distance = adtw_distance
                            train_label = train_data_this_line[0]
                        #print('Total Distance of ADTW is {0:.3f}'.format(adtw_distance))

                    # adtw_distance == None -> We can't find the better answer, so we just move on to next training data and compare it.
                    else:
                        pass
                        # print('We do not need to complete this round.')

                        # #print(test_label, train_label)
                        # # show the ADTW total time
                        # #print('Total time is {0:.5f}'.format(adtw_total_time))
                        #
                        # if adtw_total_time < dtw_total_time:
                        #     #print(i)
                        #     adtwpoint += 1
                        # else:
                        #     dtwpoint += 1

                        # print('------------------------------------')

                # calculate the total used cells

                for i in matrix_ADTW:
                    for j in i:
                        if j != math.inf:
                            count += 1

                # next train data
                train_data_index += 1

'''
# Original Dynamic Time Warping
print("---OriginDTW---")

# calculate the execution time
start_time = time.time()
print('Total Distance is {0:.3f}'.format(originDTW(Trim_TS, Trim_ComparedTS)))
print('Total time is {0:.5f}'.format(time.time() - start_time))

# My DTW -> Adaptive Dynamic Time Warping
print("---ADTW---")
# calculate the execution time
start_time = time.time()
print('Total Distance is {0:.3f}'.format(adaptiveWindowDTW(Trim_TS, Trim_ComparedTS)))
print('Total time is {0:.5f}'.format(time.time() - start_time))

'''

'''
def updateQueue(queue, inputValue, ts1_index, ts2_index):
    if inputValue in queue:
        return queue
    else:
        queue.insert(0, inputValue)
        queue = sorted(queue, key=itemgetter(0))
        return queue

def quicksort(queue):
    if len(queue) <= 1:
        return queue
    midcell = queue[len(queue) // 2]
    return quicksort([i for i in queue if i < midcell]) + [midcell] + quicksort([i for i in queue if i > midcell])
'''
